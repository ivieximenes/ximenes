
package br.com.qualicorp.redenarede.webservice.stub.pretador;

import java.net.MalformedURLException;
import java.net.URL;

import javax.jws.HandlerChain;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "ServicoPrestador", targetNamespace = "http://tempuri.org/", wsdlLocation = "file:/Users/andreandrade/lumis/qualicorp/lumisportal/lumisdata/shared/source/br.com.qualicorp.redenarede/wsdl/ServicoPrestador.wsdl")
@HandlerChain(file = "handler-chain-prestador.xml")
public class ServicoPrestador
    extends Service
{

    private final static URL SERVICOPRESTADOR_WSDL_LOCATION;
    private final static WebServiceException SERVICOPRESTADOR_EXCEPTION;
    private final static QName SERVICOPRESTADOR_QNAME = new QName("http://tempuri.org/", "ServicoPrestador");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("file:/Users/andreandrade/lumis/qualicorp/lumisportal/lumisdata/shared/source/br.com.qualicorp.redenarede/wsdl/ServicoPrestador.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        SERVICOPRESTADOR_WSDL_LOCATION = url;
        SERVICOPRESTADOR_EXCEPTION = e;
    }

    public ServicoPrestador() {
        super(__getWsdlLocation(), SERVICOPRESTADOR_QNAME);
    }

    public ServicoPrestador(WebServiceFeature... features) {
        super(__getWsdlLocation(), SERVICOPRESTADOR_QNAME);
    }

    public ServicoPrestador(URL wsdlLocation) {
        super(wsdlLocation, SERVICOPRESTADOR_QNAME);
    }

    public ServicoPrestador(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICOPRESTADOR_QNAME);
    }

    public ServicoPrestador(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ServicoPrestador(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName);
    }

    /**
     * 
     * @return
     *     returns IServicoPrestador
     */
    @WebEndpoint(name = "BasicHttpsBinding_IServicoPrestador")
    public IServicoPrestador getBasicHttpsBindingIServicoPrestador() {
        return super.getPort(new QName("http://tempuri.org/", "BasicHttpsBinding_IServicoPrestador"), IServicoPrestador.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IServicoPrestador
     */
    @WebEndpoint(name = "BasicHttpsBinding_IServicoPrestador")
    public IServicoPrestador getBasicHttpsBindingIServicoPrestador(WebServiceFeature... features) {
        return super.getPort(new QName("http://tempuri.org/", "BasicHttpsBinding_IServicoPrestador"), IServicoPrestador.class, features);
    }

    private static URL __getWsdlLocation() {
        if (SERVICOPRESTADOR_EXCEPTION!= null) {
            throw SERVICOPRESTADOR_EXCEPTION;
        }
        return SERVICOPRESTADOR_WSDL_LOCATION;
    }

}
