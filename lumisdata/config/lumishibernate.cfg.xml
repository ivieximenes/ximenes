<?xml version='1.0' encoding='utf-8'?>
<!-- $Revision: 17408 $ $Date: 2015-06-17 11:46:10 -0300 (Wed, 17 Jun 2015) $ -->
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
	<session-factory>
		<property name="dialect">lumis.portal.dao.hibernate.Oracle10gDialect</property>
		<property name="connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
		<property name="connection.username">qualicorp</property>
		<property name="connection.password">lumisadm</property>
		<property name="connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
		<!-- Database connection settings -->
		
		<!-- MS SQL Server 2012 e 2014 -->
		<!-- 
		<property name="dialect">org.hibernate.dialect.SQLServerDialect</property>
		<property name="connection.driver_class">net.sourceforge.jtds.jdbc.Driver</property>
		<property name="connection.username">sa</property>
		<property name="connection.password">lumis</property>
		<property name="connection.url">jdbc:jtds:sqlserver://localhost:1433;databaseName=lumisportal;instanceName=LUMIS;useLOBs=false</property>
		-->
		 
		<!-- Oracle 11g e 12c -->
		<!-- 
		<property name="dialect">lumis.portal.dao.hibernate.Oracle10gDialect</property>
		<property name="connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
		<property name="connection.username">lumisportal</property>
		<property name="connection.password">lumisportal</property>
		<property name="connection.url">jdbc:oracle:thin:@localhost:1521:orcl</property>
		-->

		<!-- MySQL 5.5 e 5.6 -->
		<!--
		<property name="dialect">org.hibernate.dialect.MySQL5InnoDBDialect</property>
		<property name="connection.driver_class">com.mysql.jdbc.Driver</property>
		<property name="connection.username">root</property>
		<property name="connection.password">lumis</property>
		<property name="connection.url">jdbc:mysql://localhost/lumisportal?characterEncoding=UTF-8&amp;useConfigs=maxPerformance</property>
		<property name="connection.isolation">2</property>
		-->

		<!-- DBCP connection pooling configuration (For more information see http://jakarta.apache.org/commons/dbcp/configuration.html) -->
		<property name="connection.provider_class">org.hibernate.connection.DBCPConnectionProvider</property>
		<property name="dbcp.initialSize">5</property>
		<property name="dbcp.maxActive">100</property>
		<property name="dbcp.maxIdle">100</property>
		<property name="dbcp.minIdle">5</property> 
		<property name="dbcp.maxWait">10000</property>
		<!-- You may change the validation query to a more efficient query, according to your database -->
		<property name="dbcp.validationQuery">select count(*) from lum_BuildInformation</property>
		<!-- Use a test configuration so the pool may recover from database connection failure. Choose accordingly to your environment and requirements. -->
		<property name="dbcp.testOnBorrow">false</property>
		<property name="dbcp.testOnReturn">false</property>
		<property name="dbcp.testWhileIdle">false</property>
		<property name="dbcp.numTestsPerEvictionRun">3</property>
		<property name="dbcp.timeBetweenEvictionRunsMillis">600000</property>
		<property name="dbcp.minEvictableIdleTimeMillis">600000</property>
		<property name="dbcp.removeAbandoned">true</property>
		<property name="dbcp.removeAbandonedTimeout">600</property>
		<property name="dbcp.logAbandoned">false</property>
		
		<!-- To use application server's datasource, remove all above connection.*, dbcp.* and c3p0.* properties
			and use the property commented below:

			<property name="connection.datasource">java:/comp/env/jdbc/portal</property>
				
			Add the following tag to the web.xml file:
			
			<resource-ref>
				<description>Portal DataSource</description>
				<res-ref-name>jdbc/portal</res-ref-name>
				<res-type>javax.sql.DataSource</res-type>
				<res-auth>Container</res-auth>
			</resource-ref>
			
			For enabling the datasource in the Tomcat, add a tag similar to the example below inside the 
			application's Context tag and put the jdbc driver JAR file inside tomcat/common/lib.
			If your JDBC driver does not support Connection.isValid method, must also be included in Resource the 
			attribute validationQuery with a value that is a query that may be used to validate the connection.
			For example, for MS SQL Server could be used: validationQuery="select 1"
			More details and examples in http://tomcat.apache.org/tomcat-8.0-doc/jndi-datasource-examples-howto.html
			
		    <Resource name="jdbc/portal" type="javax.sql.DataSource" 
			    maxTotal="100" maxIdle="30" maxWaitMillis="10000"
			    auth="Container" driverClassName="my.database.Driver" 
			    url="jdbc:my:database:url" username="username" password="password" />
		-->
		
		<!-- Either use data source or uncomment this to use JavaMelody to monitor SQL performance 
		<property name="jdbc.factory_class">net.bull.javamelody.HibernateBatcherFactory</property>
		 -->
		<property name="jdbc.batch_size">0</property>
		<property name="max_fetch_depth">3</property>
		<property name="cache.use_query_cache">true</property>
		
		<!-- second-level cache -->
		<property name="cache.provider_class">lumis.portal.dao.hibernate.PortalCacheProvider</property>
		
	</session-factory>
</hibernate-configuration>